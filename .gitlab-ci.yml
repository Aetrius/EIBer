stages:
  - test

# -------------------------------- CURL ISO -------------------------------- #
# base_iso_curl:
#   stage: test
#   image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/curlimages/curl
#   script:
#     - |
#       curl -L --header "PRIVATE-TOKEN: $PRIV_TOKEN" --retry 5 --retry-connrefused --output SL-Micro-6.0-Packages-x86_64-GM.iso \
#       "https://gitlab.com/api/v4/projects/61162578/packages/generic/suse_enterprise/6.0.0/SL-Micro-6.0-Packages-x86_64-GM.iso"
#     - |
#       file_size=$(stat -c%s SL-Micro-6.0-Packages-x86_64-GM.iso)
#       if [ "$file_size" -lt 1000000000 ]; then
#         echo "Error: The ISO file is smaller than expected (only $file_size bytes)."
#         exit 1
#       fi

#   artifacts:
#     paths:
#       - SL-Micro-6.0-Packages-x86_64-GM.iso.part-*
#     expire_in: 1 hour

docker_in_docker_job:
  stage: test
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - apk add --no-cache tree curl crun podman
    - wget https://github.com/kata-containers/kata-containers/releases/download/2.4.1/kata-static-2.4.1-x86_64.tar.xz
    - tar -xvf kata-static-2.4.1-x86_64.tar.xz -C /
    - ln -sf /opt/kata/bin/kata-runtime /usr/bin/kata-runtime
    - which crun || echo "crun not found"
    - crun --version || echo "crun not available"
    - which kata-runtime || echo "kata-runtime not found"
    - kata-runtime --version || echo "kata-runtime not available"
    - echo -e "[storage]\ndriver = \"vfs\"\nrunroot = \"/var/run/containers/storage\"\ngraphroot = \"/var/lib/containers/storage\"\n" > /etc/containers/storage.conf
    - mkdir -p ./eib/base-images ./eib/logs ./eib/iso
    - mkdir -p /logs
    - |
      curl -L --header "PRIVATE-TOKEN: $PRIV_TOKEN" --retry 5 --retry-connrefused --output SL-Micro-6.0-Packages-x86_64-GM.iso \
      "https://gitlab.com/api/v4/projects/61162578/packages/generic/suse_enterprise/6.0.0/SL-Micro-6.0-Packages-x86_64-GM.iso"
    - cp SL-Micro-6.0-Packages-x86_64-GM.iso ./eib/base-images
    - ls -asl ./eib/base-images
    - sleep 10  # Wait for the Docker daemon to start
    - docker info  # Verify Docker information
    - |
      podman run --rm --privileged --cgroup-manager=cgroupfs -v $(pwd)/eib:/eib registry.opensuse.org/isv/suse/edge/edgeimagebuilder/containerfile/suse/edge-image-builder:1.0.2 build -definition-file definition.yaml -config-dir /eib -build-dir /eib/_build || true
      tree ./eib
      cp ./eib/_build/build*/*.log ./eib/logs/
  artifacts:
    paths:
      - ./eib/logs/*.log
    when: always
    expire_in: 1 hour